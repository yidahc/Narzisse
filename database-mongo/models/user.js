const mongoose = require('mongoose');
require('dotenv').config();

mongoose.Promise = global.Promise;
mongoose.connect(process.env.DATABASE)

const bcrypt = require('bcrypt'); // used to hash passwords
const SALT_I = 10;

const userSchema = mongoose.Schema({
    email: {
      type: String,
      required: true,
      trim: true,
      unique: 1 // only one user per email, 1 is for true
    },
    password: {
      type: String,
      required: true,
      minLength: 5 // password must be a string at least 5 characters long and is required
    },
    name: {
      type: String,
      required: true,
      maxLength: 100 // name & last name must be a string with max 100 characters and is required
    },
    lastname: {
      type: String,
      required: true,
      maxLength: 100
    },
    cart: {
      type:Array,
      default:[] // generate empty cart  & shopping history for new user, 
    }, // will push items into it later on
    history: {
      type:Array,
      default:[] 
    },
    role: {
      type: Number,
      default: 0 // either you are an administrator or a user
    }, // 0 is for user and that is the default for any new account
    token: {
      type: Number 
    }
  });
  
  userSchema.pre('save', function(next){ // next is function in server/config that will run after this function
    var user = this; //es5 requires us to specify what 'this' is since it is not automatically 
    //bound at runtime
    if(user.isModified('password')){ //isModified is a mongo method for when a user is trying to modify something
      bcrypt.genSalt(SALT_I, function(err, salt){ // generating hash for user password
        if (err) return next(err); // if error, continue to next function with err as parameter
        bcrypt.hash(user.password, salt, function(err, hash){ //with es6, one would write "this.password" and "this.isModified"
          if (err) return next(err); // next function will return "success: false"
          user.password = hash; // generating hash for user password
          next(); // continue to next function
        });
      });
    } else {
      next() // if they are modifying their password, we regenerate a hash, else we move to next function
    }
  })

  const User = mongoose.model('User', userSchema);
  module.exports= { User }
  

  /*
  sample response from server for new user with hashed password:
  {
    "success": true,
    "userdata": {
        "__v": 0, // automatically generated by mongo
        "email": "yidah@gmail.com",
        "password": "$2b$10$KjTi5kxJ5p2StIKfO8V6R./Tn7gTIyLF0QIwnxLdBCP/OyG4n3wxW", // automatically generated by bcrypt
        "name": "yidah",
        "lastname": "curiel",
        "_id": "5ce0add2a9882b700b81516e", // automatically generated by mongo
        "role": 0,
        "history": [],
        "cart": []
    }
}
*/